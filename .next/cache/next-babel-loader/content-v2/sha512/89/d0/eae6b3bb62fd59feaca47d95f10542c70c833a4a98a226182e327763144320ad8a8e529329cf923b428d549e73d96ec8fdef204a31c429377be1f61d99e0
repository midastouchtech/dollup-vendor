{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\n\nvar App = function App(_ref) {\n  _s();\n\n  var onUploadComplete = _ref.onUploadComplete;\n\n  var _useState = useState([]),\n      fileList = _useState[0],\n      setFileList = _useState[1];\n\n  var _useState2 = useState(false),\n      isUploading = _useState2[0],\n      setIsUploading = _useState2[1];\n\n  var onChange = function onChange(_ref2) {\n    var fileList = _ref2.fileList;\n    console.log(\"fileList\", fileList);\n    setFileList(fileList);\n    var url = \"https://api.cloudinary.com/v1_1/mida-touch-technoogies/raw/upload\";\n    var formData = new FormData();\n    formData.append(\"file\", fileList[0].originalFileOb);\n    formData.append(\"upload_preset\", \"pwdsm6sz\");\n    axios({\n      method: \"POST\",\n      data: formData,\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      url: url\n    }).then(function (response) {\n      setIsUploading(false);\n      onUploadComplete(response.data.secure_url);\n    }).then(function (data) {});\n  };\n\n  var beforeUpload = function beforeUpload(file) {\n    var isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n\n    var isLt2M = file.size / 1024 / 1024 < 2;\n\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n\n    return isJpgOrPng && isLt2M;\n  };\n\n  var onPreview = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var src, image, imgWindow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              src = file.url;\n\n              if (src) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return new Promise(function (resolve) {\n                var reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n\n                reader.onload = function () {\n                  return resolve(reader.result);\n                };\n              });\n\n            case 4:\n              src = _context.sent;\n\n            case 5:\n              image = new Image();\n              image.src = src;\n              imgWindow = window.open(src);\n              imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onPreview(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: fileList.length < 5 && \"+ Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(App, \"ZTv2sK31UW5B88mqTTFDzwlZ8bg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","ImgCrop","App","onUploadComplete","fileList","setFileList","isUploading","setIsUploading","onChange","console","log","url","formData","FormData","append","originalFileOb","axios","method","data","headers","then","response","secure_url","beforeUpload","file","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","length"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,MAAhC;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAA0B;AAAA;;AAAA,MAAvBC,gBAAuB,QAAvBA,gBAAuB;;AAAA,kBACJL,QAAQ,CAAC,EAAD,CADJ;AAAA,MAC7BM,QAD6B;AAAA,MACnBC,WADmB;;AAAA,mBAEEP,QAAQ,CAAC,KAAD,CAFV;AAAA,MAE7BQ,WAF6B;AAAA,MAEhBC,cAFgB;;AAGpC,MAAMC,QAAQ,GAAG,SAAXA,QAAW,QAAkB;AAAA,QAAfJ,QAAe,SAAfA,QAAe;AAEjCK,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBN,QAAxB;AACEC,IAAAA,WAAW,CAACD,QAAD,CAAX;AAEA,QAAMO,GAAG,GACP,mEADF;AAEA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBV,QAAQ,CAAC,CAAD,CAAR,CAAYW,cAApC;AACAH,IAAAA,QAAQ,CAACE,MAAT,CAAgB,eAAhB,EAAiC,UAAjC;AACAE,IAAAA,KAAK,CAAC;AACJC,MAAAA,MAAM,EAAE,MADJ;AAEJC,MAAAA,IAAI,EAAEN,QAFF;AAGJO,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAHL;AAIJR,MAAAA,GAAG,EAAHA;AAJI,KAAD,CAAL,CAMGS,IANH,CAMQ,UAACC,QAAD,EAAc;AAClBd,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAJ,MAAAA,gBAAgB,CAACkB,QAAQ,CAACH,IAAT,CAAcI,UAAf,CAAhB;AACD,KATH,EAUGF,IAVH,CAUQ,UAACF,IAAD,EAAU,CAAE,CAVpB;AAYH,GAtBD;;AAwBA,MAAMK,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,QAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,KAAc,YAAd,IAA8BF,IAAI,CAACE,IAAL,KAAc,WAA/D;;AACA,QAAI,CAACD,UAAL,EAAiB;AACf1B,MAAAA,OAAO,CAAC4B,KAAR,CAAc,mCAAd;AACD;;AACD,QAAMC,MAAM,GAAGJ,IAAI,CAACK,IAAL,GAAY,IAAZ,GAAmB,IAAnB,GAA0B,CAAzC;;AACA,QAAI,CAACD,MAAL,EAAa;AACX7B,MAAAA,OAAO,CAAC4B,KAAR,CAAc,8BAAd;AACD;;AACD,WAAOF,UAAU,IAAIG,MAArB;AACD,GAVD;;AAYA,MAAME,SAAS;AAAA,yEAAG,iBAAON,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZO,cAAAA,GADY,GACNP,IAAI,CAACb,GADC;;AAAA,kBAEXoB,GAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGF,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AACnC,oBAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,gBAAAA,MAAM,CAACE,aAAP,CAAqBZ,IAAI,CAACa,aAA1B;;AACAH,gBAAAA,MAAM,CAACI,MAAP,GAAgB;AAAA,yBAAML,OAAO,CAACC,MAAM,CAACK,MAAR,CAAb;AAAA,iBAAhB;AACD,eAJW,CAHE;;AAAA;AAGdR,cAAAA,GAHc;;AAAA;AASVS,cAAAA,KATU,GASF,IAAIC,KAAJ,EATE;AAUhBD,cAAAA,KAAK,CAACT,GAAN,GAAYA,GAAZ;AACMW,cAAAA,SAXU,GAWEC,MAAM,CAACC,IAAP,CAAYb,GAAZ,CAXF;AAYhBW,cAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEG,QAAX,CAAoBC,KAApB,CAA0BN,KAAK,CAACO,SAAhC;;AAZgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATjB,SAAS;AAAA;AAAA;AAAA,KAAf;;AAeA,sBACE,QAAC,OAAD;AAAS,IAAA,MAAM,MAAf;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAC,cADX;AAEE,MAAA,QAAQ,EAAE1B,QAFZ;AAGE,MAAA,QAAQ,EAAEI,QAHZ;AAIE,MAAA,SAAS,EAAEsB,SAJb;AAKE,MAAA,YAAY,EAAEP,YALhB;AAAA,gBAOGnB,QAAQ,CAAC4C,MAAT,GAAkB,CAAlB,IAAuB;AAP1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAaD,CAnED;;GAAM9C,G;;KAAAA,G;AAoEN,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst App = ({ onUploadComplete }) => {\n  const [fileList, setFileList] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const onChange = ({ fileList }) => {\n\n    console.log(\"fileList\", fileList);\n      setFileList(fileList);\n\n      const url =\n        \"https://api.cloudinary.com/v1_1/mida-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      formData.append(\"file\", fileList[0].originalFileOb);\n      formData.append(\"upload_preset\", \"pwdsm6sz\");\n      axios({\n        method: \"POST\",\n        data: formData,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        url,\n      })\n        .then((response) => {\n          setIsUploading(false);\n          onUploadComplete(response.data.secure_url);\n        })\n        .then((data) => {});\n      \n  };\n\n  const beforeUpload = (file) => {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {fileList.length < 5 && \"+ Upload\"}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}