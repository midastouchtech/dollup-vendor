{"ast":null,"code":"import _toConsumableArray from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var makeStore = function makeStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var store = createStore(rootReducer, bindMiddleware([sagaMiddleware, logger]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport var wrapper = createWrapper(makeStore, {\n  debug: false\n});\n/*\nconst persistConfig = {\n    key: 'martfury',\n    storage,\n    whitelist: ['cart', 'compare', 'auth', 'wishlist'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        bindMiddleware([sagaMiddleware])\n    );\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport default configureStore;\n*/","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/store/store.js"],"names":["applyMiddleware","createStore","createSagaMiddleware","persistReducer","storage","logger","rootReducer","rootSaga","createWrapper","bindMiddleware","middleware","require","composeWithDevTools","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":";AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACnC,YAA2C;AAAA,mBACPC,OAAO,CAAC,0BAAD,CADA;AAAA,QAC/BC,mBAD+B,YAC/BA,mBAD+B;;AAEvC,WAAOA,mBAAmB,CAACZ,eAAe,MAAf,4BAAmBU,UAAnB,EAAD,CAA1B;AACH;;AACD,SAAOV,eAAe,MAAf,4BAAmBU,UAAnB,EAAP;AACH,CAND;;AAQA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAa;AAClC,MAAMC,cAAc,GAAGb,oBAAoB,EAA3C;AACA,MAAMc,KAAK,GAAGf,WAAW,CAACK,WAAD,EAAcG,cAAc,CAAC,CAACM,cAAD,EAAgBV,MAAhB,CAAD,CAA5B,CAAzB;AAEAW,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBX,QAAnB,CAAjB;AAEA,SAAOS,KAAP;AACH,CAPM;AASP,OAAO,IAAMG,OAAO,GAAGX,aAAa,CAACK,SAAD,EAAY;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger'\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\nimport { createWrapper } from 'next-redux-wrapper';\n\nconst bindMiddleware = (middleware) => {\n    if (process.env.NODE_ENV !== 'production') {\n        const { composeWithDevTools } = require('redux-devtools-extension');\n        return composeWithDevTools(applyMiddleware(...middleware));\n    }\n    return applyMiddleware(...middleware);\n};\n\nexport const makeStore = (context) => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(rootReducer, bindMiddleware([sagaMiddleware,logger]));\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\nexport const wrapper = createWrapper(makeStore, { debug: false });\n\n/*\nconst persistConfig = {\n    key: 'martfury',\n    storage,\n    whitelist: ['cart', 'compare', 'auth', 'wishlist'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nfunction configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        persistedReducer,\n        initialState,\n        bindMiddleware([sagaMiddleware])\n    );\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport default configureStore;\n*/\n"]},"metadata":{},"sourceType":"module"}