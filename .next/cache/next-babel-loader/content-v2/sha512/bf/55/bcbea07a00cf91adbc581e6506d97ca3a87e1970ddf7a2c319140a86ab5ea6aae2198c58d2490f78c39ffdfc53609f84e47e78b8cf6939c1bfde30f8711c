{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\";\nimport React, { useState } from \"react\";\nimport { message, Upload, Progress } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\n\nconst App = ({\n  onUploadComplete\n}) => {\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState([]);\n  const {\n    0: canUpload,\n    1: setCanUpload\n  } = useState(true);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n\n  const onChange = ({\n    fileList\n  }) => {\n    console.log(\"fileList\", fileList);\n    console.log(\"canUpload\", canUpload);\n\n    if (canUpload) {\n      setFileList(fileList);\n      const file = fileList[0].originFileObj;\n      const url = \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: progressEvent => {\n            const percentage = progressEvent.loaded * 100 / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url\n        }).then(response => {\n          setIsUploading(false);\n          onUploadComplete(response.data.secure_url);\n        }).then(data => {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  const beforeUpload = file => {\n    setFileList([]);\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n    console.log(\"is image\", isJpgOrPng);\n\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n\n    const isLt2M = file.size < 436342;\n    console.log(\"is small \", isLt2M);\n\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n\n    return false;\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n  };\n\n  console.log(progress);\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: [(progress === 0 || progress != 100) && \"+ Upload\", progress > 0 && progress === 100 && /*#__PURE__*/_jsxDEV(Progress, {\n        size: \"small\",\n        percent: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 48\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","Progress","ImgCrop","axios","App","onUploadComplete","fileList","setFileList","canUpload","setCanUpload","progress","setProgress","onChange","console","log","file","originFileObj","url","formData","FormData","append","method","data","headers","onUploadProgress","progressEvent","percentage","loaded","total","toFixed","then","response","setIsUploading","secure_url","beforeUpload","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload,Progress } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\n\nconst App = ({ onUploadComplete }) => {\n  const [fileList, setFileList] = useState([]);\n  const [canUpload, setCanUpload] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const onChange = ({ fileList }) => {\n    console.log(\"fileList\", fileList);\n    console.log(\"canUpload\", canUpload);\n\n    if (canUpload) {\n      setFileList(fileList);\n      const file = fileList[0].originFileObj;\n      const url =\n        \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n          onUploadProgress: (progressEvent) => {\n            const percentage =\n              (progressEvent.loaded * 100) / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url,\n        })\n          .then((response) => {\n            setIsUploading(false);\n            onUploadComplete(response.data.secure_url);\n          })\n          .then((data) => {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  const beforeUpload = (file) => {\n    setFileList([]);\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n    console.log(\"is image\", isJpgOrPng);\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n    const isLt2M = file.size < 436342;\n    console.log(\"is small \", isLt2M);\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n    return false;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n  console.log(progress);\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {(progress === 0 || progress != 100) && \"+ Upload\"}\n        {(progress > 0 && progress === 100) && <Progress size=\"small\" percent={progress} />}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}