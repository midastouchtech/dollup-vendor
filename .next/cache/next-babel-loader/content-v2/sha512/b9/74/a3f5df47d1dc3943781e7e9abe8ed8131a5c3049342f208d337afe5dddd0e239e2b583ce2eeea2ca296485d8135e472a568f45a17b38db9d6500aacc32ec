{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\";\nimport React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst App = ({\n  onUploadComplete\n}) => {\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState([]);\n  const {\n    0: isUploading,\n    1: setIsUploading\n  } = useState(false);\n  const {\n    0: canUpload,\n    1: setCanUpload\n  } = useState(true);\n\n  const onChange = ({\n    fileList\n  }) => {\n    console.log(\"fileList\", fileList);\n    const url = \"https://api.cloudinary.com/v1_1/mida-touch-technoogies/raw/upload\";\n    const formData = new FormData();\n    formData.append(\"file\", fileList[0].originalFileOb);\n    formData.append(\"upload_preset\", \"pwdsm6sz\");\n\n    if (canUpload) {\n      setFileList(fileList);\n      axios({\n        method: \"POST\",\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        url\n      }).then(response => {\n        setIsUploading(false);\n        onUploadComplete(response.data.secure_url);\n      }).then(data => {});\n    }\n  };\n\n  const beforeUpload = file => {\n    console.log(\"file\", file);\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    console.log(\"is image\", isJpgOrPng);\n\n    if (!isJpgOrPng) {\n      console.log(\"file not image\");\n      message.error('You can only upload JPG/PNG file!');\n      setCanUpload(false);\n    }\n\n    const isLt2M = file.size < 436342;\n    console.log(\"is small\", isLt2M);\n\n    if (!isLt2M) {\n      console.log(\"file not small\");\n      message.error('Image must smaller than 2MB!');\n      setCanUpload(false);\n    }\n\n    return isJpgOrPng && isLt2M;\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: fileList.length < 5 && \"+ Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","ImgCrop","App","onUploadComplete","fileList","setFileList","isUploading","setIsUploading","canUpload","setCanUpload","onChange","console","log","url","formData","FormData","append","originalFileOb","axios","method","data","headers","then","response","secure_url","beforeUpload","file","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\n\n\nconst App = ({ onUploadComplete }) => {\n  const [fileList, setFileList] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [canUpload, setCanUpload] = useState(true)\n  const onChange = ({ fileList }) => {\n\n    console.log(\"fileList\", fileList);\n      \n\n      const url =\n        \"https://api.cloudinary.com/v1_1/mida-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      formData.append(\"file\", fileList[0].originalFileOb);\n      formData.append(\"upload_preset\", \"pwdsm6sz\");\n    if(canUpload){\n        setFileList(fileList);\n        axios({\n            method: \"POST\",\n            data: formData,\n            headers: { \"Content-Type\": \"multipart/form-data\" },\n            url,\n          })\n            .then((response) => {\n              setIsUploading(false);\n              onUploadComplete(response.data.secure_url);\n            })\n            .then((data) => {});\n    }\n      \n  };\n\n  const beforeUpload = (file) => {\n    console.log(\"file\", file)\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    console.log(\"is image\", isJpgOrPng)\n    if (!isJpgOrPng) {\n      console.log(\"file not image\")\n      message.error('You can only upload JPG/PNG file!');\n      setCanUpload(false)\n    }\n    const isLt2M = file.size < 436342;\n    console.log(\"is small\", isLt2M)\n    if (!isLt2M) {\n      console.log(\"file not small\")\n      message.error('Image must smaller than 2MB!');\n      setCanUpload(false)\n    }\n    return isJpgOrPng && isLt2M;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {fileList.length < 5 && \"+ Upload\"}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}