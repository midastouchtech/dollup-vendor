{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\";\nimport React, { useState } from \"react\";\nimport { message, Upload, Progress, Space } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\nimport { isEmpty, isNil } from \"ramda\";\n\nconst exists = i => !isEmpty(i) && !isNil(i);\n\nconst App = ({\n  onUploadComplete,\n  existingFileList\n}) => {\n  let {\n    0: fileList,\n    1: setFileList\n  } = useState();\n\n  if (!exists(fileList) && exists(existingFileList)) {\n    setFileList(existingFileList);\n  }\n\n  const {\n    0: canUpload,\n    1: setCanUpload\n  } = useState(true);\n  const {\n    0: progress,\n    1: setProgress\n  } = useState(0);\n\n  const onChange = ({\n    fileList\n  }) => {\n    if (canUpload) {\n      setFileList(fileList);\n      const file = fileList[0].originFileObj;\n      const url = \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        formData.append(\"api_key\", \"529993435491544\");\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: progressEvent => {\n            const percentage = progressEvent.loaded * 100 / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url\n        }).then(response => {\n          onUploadComplete(response.data.secure_url);\n        }).then(data => {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  const beforeUpload = file => {\n    setFileList([]);\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n\n    const isLt2M = file.size < 436342;\n\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n\n    return false;\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n  };\n\n  console.log(progress);\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: [(progress === 0 || progress === 100) && \"+ Upload\", progress > 0 && progress < 100 && /*#__PURE__*/_jsxDEV(Space, {\n        wrap: true,\n        children: /*#__PURE__*/_jsxDEV(Progress, {\n          size: \"small\",\n          percent: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","Progress","Space","ImgCrop","axios","isEmpty","isNil","exists","i","App","onUploadComplete","existingFileList","fileList","setFileList","canUpload","setCanUpload","progress","setProgress","onChange","file","originFileObj","url","formData","FormData","append","method","data","headers","onUploadProgress","progressEvent","percentage","loaded","total","toFixed","then","response","secure_url","beforeUpload","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload, Progress, Space } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\nimport { isEmpty, isNil } from \"ramda\";\n\nconst exists = (i) => !isEmpty(i) && !isNil(i);\n\nconst App = ({ onUploadComplete, existingFileList }) => {\n  let [fileList, setFileList] = useState();\n  if (!exists(fileList) && exists(existingFileList)) {\n    setFileList(existingFileList);\n  }\n  const [canUpload, setCanUpload] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const onChange = ({ fileList }) => {\n    if (canUpload) {\n      setFileList(fileList);\n      const file = fileList[0].originFileObj;\n      const url =\n        \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        formData.append(\"api_key\", \"529993435491544\");\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n          onUploadProgress: (progressEvent) => {\n            const percentage =\n              (progressEvent.loaded * 100) / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url,\n        })\n          .then((response) => {\n            onUploadComplete(response.data.secure_url);\n          })\n          .then((data) => {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  const beforeUpload = (file) => {\n    setFileList([]);\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n    const isLt2M = file.size < 436342;\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n    return false;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n  console.log(progress);\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {(progress === 0 || progress === 100) && \"+ Upload\"}\n        {progress > 0 && progress < 100 && (\n          <Space wrap>\n            <Progress size=\"small\" percent={progress} />\n          </Space>\n        )}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}