{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from 'axios';\n\nvar App = function App(_ref) {\n  _s();\n\n  var onUploadComplete = _ref.onUploadComplete;\n\n  var _useState = useState([]),\n      fileList = _useState[0],\n      setFileList = _useState[1];\n\n  var _useState2 = useState(true),\n      canUpload = _useState2[0],\n      setCanUpload = _useState2[1];\n\n  var _useState3 = useState(0),\n      progress = _useState3[0],\n      setProgress = _useState3[1];\n\n  var onChange = function onChange(_ref2) {\n    var fileList = _ref2.fileList;\n    console.log(\"fileList\", fileList);\n    console.log(\"canUpload\", canUpload);\n\n    if (canUpload) {\n      setFileList(fileList);\n      var url = \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      var formData = new FormData();\n      formData.append(\"file\", fileList[0].originFileObj);\n      formData.append(\"upload_preset\", \"uxkgv0pa\");\n      axios({\n        method: \"POST\",\n        data: formData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        },\n        onUploadProgress: function onUploadProgress(progressEvent) {\n          var percentage = progressEvent.loaded * 100 / progressEvent.total;\n          setProgress(+percentage.toFixed(2));\n        },\n        url: url\n      }).then(function (response) {\n        setIsUploading(false);\n        onUploadComplete(response.data.secure_url);\n      }).then(function (data) {});\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  var beforeUpload = function beforeUpload(file) {\n    setFileList([]);\n    var isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    console.log(\"is image\", isJpgOrPng);\n\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n      setCanUpload(false);\n    }\n\n    var isLt2M = file.size < 436342;\n    console.log(\"is small \", isLt2M);\n\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n      setCanUpload(false);\n    }\n\n    return false;\n  };\n\n  var onPreview = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var src, image, imgWindow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              src = file.url;\n\n              if (src) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return new Promise(function (resolve) {\n                var reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n\n                reader.onload = function () {\n                  return resolve(reader.result);\n                };\n              });\n\n            case 4:\n              src = _context.sent;\n\n            case 5:\n              image = new Image();\n              image.src = src;\n              imgWindow = window.open(src);\n              imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onPreview(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log(progress);\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: fileList.length < 5 && \"+ Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(App, \"At9UFpNHCE9BjjxzG5oD1JrjVec=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","ImgCrop","axios","App","onUploadComplete","fileList","setFileList","canUpload","setCanUpload","progress","setProgress","onChange","console","log","url","formData","FormData","append","originFileObj","method","data","headers","onUploadProgress","progressEvent","percentage","loaded","total","toFixed","then","response","setIsUploading","secure_url","beforeUpload","file","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from 'axios';\n\n\nconst App = ({ onUploadComplete }) => {\n  const [fileList, setFileList] = useState([]);\n  const [canUpload, setCanUpload] = useState(true)\n  const [progress, setProgress] = useState(0)\n  const onChange = ({ fileList }) => {\n    \n    console.log(\"fileList\", fileList);\n    console.log(\"canUpload\", canUpload)\n\n      \n    if(canUpload){\n        setFileList(fileList);\n        \n        const url =\n        \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      formData.append(\"file\", fileList[0].originFileObj);\n      formData.append(\"upload_preset\", \"uxkgv0pa\");\n        axios({\n            method: \"POST\",\n            data: formData,\n            headers: { \"Content-Type\": \"multipart/form-data\" },\n            onUploadProgress: (progressEvent) => {\n                const percentage = (progressEvent.loaded * 100) / progressEvent.total;\n                setProgress(+percentage.toFixed(2));\n              },\n            url,\n          })\n            .then((response) => {\n              setIsUploading(false);\n              onUploadComplete(response.data.secure_url);\n            })\n            .then((data) => {});\n    }\n    else{\n        setCanUpload(true)\n    }\n      \n  };\n\n  const beforeUpload = (file) => {\n    setFileList([])\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    console.log(\"is image\", isJpgOrPng)\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n      setCanUpload(false)\n    }\n    const isLt2M = file.size < 436342;\n    console.log(\"is small \", isLt2M)\n    if (!isLt2M) {\n      message.error('Image must smaller than 2MB!');\n      setCanUpload(false)\n    }\n    return false;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n  console.log(progress)\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {fileList.length < 5 && \"+ Upload\"}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}