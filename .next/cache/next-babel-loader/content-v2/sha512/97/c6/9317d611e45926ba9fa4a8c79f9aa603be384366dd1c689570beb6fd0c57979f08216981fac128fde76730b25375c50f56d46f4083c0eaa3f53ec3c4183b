{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/aya/dev/projects/dollup/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/aya/dev/projects/dollup/components/upload/index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { message, Upload, Progress, Space } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\n\nvar App = function App(_ref) {\n  _s();\n\n  var onUploadComplete = _ref.onUploadComplete,\n      existingFileList = _ref.existingFileList;\n\n  var _useState = useState(existingFileList),\n      fileList = _useState[0],\n      setFileList = _useState[1];\n\n  var _useState2 = useState(true),\n      canUpload = _useState2[0],\n      setCanUpload = _useState2[1];\n\n  var _useState3 = useState(0),\n      progress = _useState3[0],\n      setProgress = _useState3[1];\n\n  var onChange = function onChange(_ref2) {\n    var fileList = _ref2.fileList;\n\n    if (canUpload) {\n      setFileList(fileList);\n      var file = fileList[0].originFileObj;\n      var url = \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      var formData = new FormData();\n\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        formData.append(\"api_key\", \"529993435491544\");\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          },\n          onUploadProgress: function onUploadProgress(progressEvent) {\n            var percentage = progressEvent.loaded * 100 / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url: url\n        }).then(function (response) {\n          onUploadComplete(response.data.secure_url);\n        }).then(function (data) {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  var beforeUpload = function beforeUpload(file) {\n    setFileList([]);\n    var isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n\n    var isLt2M = file.size < 436342;\n\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n\n    return false;\n  };\n\n  var onPreview = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var src, image, imgWindow;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              src = file.url;\n\n              if (src) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return new Promise(function (resolve) {\n                var reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n\n                reader.onload = function () {\n                  return resolve(reader.result);\n                };\n              });\n\n            case 4:\n              src = _context.sent;\n\n            case 5:\n              image = new Image();\n              image.src = src;\n              imgWindow = window.open(src);\n              imgWindow === null || imgWindow === void 0 ? void 0 : imgWindow.document.write(image.outerHTML);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onPreview(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  console.log(progress);\n  return /*#__PURE__*/_jsxDEV(ImgCrop, {\n    rotate: true,\n    children: /*#__PURE__*/_jsxDEV(Upload, {\n      listType: \"picture-card\",\n      fileList: fileList,\n      onChange: onChange,\n      onPreview: onPreview,\n      beforeUpload: beforeUpload,\n      children: [(progress === 0 || progress === 100) && \"+ Upload\", progress > 0 && progress < 100 && /*#__PURE__*/_jsxDEV(Space, {\n        wrap: true,\n        children: /*#__PURE__*/_jsxDEV(Progress, {\n          size: \"small\",\n          percent: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 58\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 46\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(App, \"QHruTG0kenSdyGTERuI57IXbp8k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aya/dev/projects/dollup/components/upload/index.jsx"],"names":["React","useState","message","Upload","Progress","Space","ImgCrop","axios","App","onUploadComplete","existingFileList","fileList","setFileList","canUpload","setCanUpload","progress","setProgress","onChange","file","originFileObj","url","formData","FormData","append","method","data","headers","onUploadProgress","progressEvent","percentage","loaded","total","toFixed","then","response","secure_url","beforeUpload","isJpgOrPng","type","error","isLt2M","size","onPreview","src","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { message, Upload,Progress,Space } from \"antd\";\nimport ImgCrop from \"antd-img-crop\";\nimport axios from \"axios\";\n\nconst App = ({ onUploadComplete, existingFileList }) => {\n  const [fileList, setFileList] = useState(existingFileList);\n  const [canUpload, setCanUpload] = useState(true);\n  const [progress, setProgress] = useState(0);\n  const onChange = ({ fileList }) => {\n    if (canUpload) {\n      setFileList(fileList);\n      const file = fileList[0].originFileObj;\n      const url =\n        \"https://api.cloudinary.com/v1_1/midas-touch-technoogies/raw/upload\";\n      const formData = new FormData();\n      if (file) {\n        formData.append(\"file\", file);\n        formData.append(\"upload_preset\", \"lcemibrf\");\n        formData.append(\"api_key\", \"529993435491544\")\n        axios({\n          method: \"POST\",\n          data: formData,\n          headers: { \"Content-Type\": \"multipart/form-data\" },\n          onUploadProgress: (progressEvent) => {\n            const percentage =\n              (progressEvent.loaded * 100) / progressEvent.total;\n            setProgress(+percentage.toFixed(2));\n          },\n          url,\n        })\n          .then((response) => {\n            onUploadComplete(response.data.secure_url);\n          })\n          .then((data) => {});\n      }\n    } else {\n      setCanUpload(true);\n    }\n  };\n\n  const beforeUpload = (file) => {\n    setFileList([]);\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\n    if (!isJpgOrPng) {\n      message.error(\"You can only upload JPG/PNG file!\");\n      setCanUpload(false);\n    }\n    const isLt2M = file.size < 436342;\n    if (!isLt2M) {\n      message.error(\"Image must smaller than 2MB!\");\n      setCanUpload(false);\n    }\n    return false;\n  };\n\n  const onPreview = async (file) => {\n    let src = file.url;\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n  console.log(progress)\n  return (\n    <ImgCrop rotate>\n      <Upload\n        listType=\"picture-card\"\n        fileList={fileList}\n        onChange={onChange}\n        onPreview={onPreview}\n        beforeUpload={beforeUpload}\n      >\n        {(progress === 0 || progress === 100) && \"+ Upload\"}\n        {(progress > 0 && progress < 100) && <Space wrap><Progress size=\"small\"  percent={progress} /></Space>}\n      </Upload>\n    </ImgCrop>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}